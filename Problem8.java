import java.math.BigInteger;
import java.util.Arrays;

/*
 * Largest product in a series
 * 
 * The four adjacent digits in the 1000-digit number that have the greatest product are 9 × 9 × 8 × 9 = 5832.


Find the thirteen adjacent digits in the 1000-digit number that have the greatest product. What is the value of this product?
 */
public class Problem8
{
	private String constant="7316717653133062491922511967442657474235534919493496983520312774506326239578318016984801869478851843858615607891129494954595017379583319528532088055111254069874715852386305071569329096329522744304355766896648950445244523161731856403098711121722383113622298934233803081353362766142828064444866452387493035890729629049156044077239071381051585930796086670172427121883998797908792274921901699720888093776657273330010533678812202354218097512545405947522435258490771167055601360483958644670632441572215539753697817977846174064955149290862569321978468622482839722413756570560574902614079729686524145351004748216637048440319989000889524345065854122758866688116427171479924442928230863465674813919123162824586178664583591245665294765456828489128831426076900422421902267105562632111110937054421750694165896040807198403850962455444362981230987879927244284909188845801561660979191338754992005240636899125607176060588611646710940507754100225698315520005593572972571636269561882670428252483600823257530420752963450";//The big 1000 digit numbe to be parsed.
	private long returnProduct(long arr[])//method to return the product of the array in arguments.
	{
		long product=1;
		for (int i=0;i<arr.length;i++)
		{
			product=product*arr[i];
		}
		return product;
	}
	private long[] initializeArray()//Initialize the array by converting each of its digits into an element of array
	{
		long returnArray[]=new long[1000];
		BigInteger temp=new BigInteger(new StringBuffer(constant).reverse().toString());//BigIntger to manipulate the big number. Long cannot handle it. Also it is reversed because the chopping algorithm reverses the number.
		for (int i=0;i<1000;i++)
		{
			returnArray[i]=temp.remainder(new BigInteger("10")).longValue();//finding the remainder on the BigInteger object and then converting it to long number.
			temp=temp.divide(new BigInteger("10"));//dividing the contents of the BigInteger object by 10
		}
		return returnArray;//returning the array of long numbers.
	}
	private void largestProduct()//Method to find the largest product.
	{
		long products[]=new long[1000];//variable to store the products of 13 digits.
		long numbers[]=new long[1000];//variable to hold the digits of the 1000 digit number.
		numbers=this.initializeArray();
		for (int i=0;i<986;i++) 
		{
			products[i]=returnProduct(Arrays.copyOfRange(numbers, i, i+13));//finding the products of consecutive 13 digits of the 1000-diit number.
		}
		Arrays.sort(products);//Sorting the array to print the largest number.
		System.out.println(products[products.length-1]);
			
	}
	public static void main(String args[])
	{

		new Problem8().largestProduct();//calling the method using temp object.
	}
}//THE END
